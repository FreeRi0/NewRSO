name: update frontend on the server
on:
  push:
    branches:
      - dev
jobs:
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./Client/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/rso_frontend:dev
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    needs:
      - build_frontend_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd rso_dev
            sudo docker compose down
            sudo docker volume rm rso_dev_frontend_dist_dev
            sudo docker system prune -f
            sudo docker image prune -f
            sudo docker compose pull
            sudo docker compose up -d
  post_deploy_tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    needs:
      - deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Get commit author name
        id: get_author
        run: |
          author_name=$(git log -1 --pretty=format:'%an')
          echo "author_name=$author_name" >> $GITHUB_ENV
          echo "Author: $author_name"

      - name: Send success or error based on status code
        if: success()
        run: |
          echo "Status is 200, sending success notification to Telegram."
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
          -d chat_id=$TELEGRAM_CHAT_ID \
          -d text="<b>✅ Деплой прошел успешно!</b>%0A<b>Статус:</b> 200%0A<b>Коммит:</b> <code>$GITHUB_SHA</code>%0A<b>Автор:</b> ${{ env.author_name }}%0A<b>Ветка:</b> $branch_name" \
          -d parse_mode="HTML"
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Send workflow failure notification
        if: failure()
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          echo "Branch name: $branch_name"
          echo "Commit: $GITHUB_SHA"
          echo "Author: ${{ env.author_name }}"
  
          echo "Workflow error, sending failure notification to Telegram."
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d text="<b>❌ Ошибка деплоя!</b>%0A<b>Статус:</b> Workflow error%0A<b>Коммит:</b> <code>$GITHUB_SHA</code>%0A<b>Автор:</b> ${{ env.author_name }}%0A<b>Ветка:</b> $branch_name%0A%0A<b><a href=\"https://github.com/d2avids/rso/actions\">Смотреть подробнее</a></b>" \
            -d parse_mode="HTML"
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
